// #include <cuda_runtime.h>
// #include "fluid_kernels.h"

__global__ void DiffuseKernel(
    float* DiffusionTarget,
    const float* TargetPrior,
    float DiffusionConstant,
    int SimulationWidth,
    int SimulationHeight
)
{
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;

    if (i >= 1 && i <= SimulationWidth && j >= 1 && j <= SimulationHeight)
    {
        int idx = i + (SimulationWidth + 2) * j;

        DiffusionTarget[idx] = (TargetPrior[idx] +
            DiffusionConstant * (
                DiffusionTarget[idx - 1] + 
                DiffusionTarget[idx + 1] +
                DiffusionTarget[idx - (SimulationWidth+2)] + 
                DiffusionTarget[idx + (SimulationWidth+2)]
            )
        ) / (1.f + 4.f * DiffusionConstant);
    }
}

extern "C"
void NSDiffuse_GPU(
    int Mode,
    float* d_DiffusionTarget,
    float* d_TargetPrior,
    float DiffusionConstant,
    int SimulationWidth,
    int SimulationHeight,
    int GaussSeidelIterations
)
{
    dim3 blockSize(16, 16);
    dim3 gridSize(
        (SimulationWidth + blockSize.x) / blockSize.x,
        (SimulationHeight + blockSize.y) / blockSize.y
    );

    for(int iter = 0; iter < GaussSeidelIterations; ++iter)
    {
        DiffuseKernel<<<gridSize, blockSize>>>(
            d_DiffusionTarget,
            d_TargetPrior,
            DiffusionConstant,
            SimulationWidth,
            SimulationHeight
        );
        
    }

}
